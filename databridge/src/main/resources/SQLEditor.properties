# Ingestions added/modified in last one hour
LATEST_INGESTIONS = SELECT JSON_DATA FROM entity WHERE TYPE = ? and LAST_MODIFIED > NOW() - INTERVAL 1 HOUR

#Ingestions added/modified for total period of time
TOTAL_INGESTIONS = SELECT JSON_DATA FROM entity WHERE TYPE = ?

# Get JSON for a given Entity
GET_JSON_FOR_ENTITY = SELECT JSON_DATA FROM entity WHERE NAME = ?

# Details of Entity by Name
ENTITY_DETAILS = SELECT * FROM entity WHERE NAME = ?

# List Entities
INSERT_LISTOFFILES = INSERT INTO data_ingestion_log	(DATA_INGESTION_ID,BATCH,listOfFiles,JOB_STAGE,JOB_STATUS,CREATED) VALUES(?,?,?,?,?,now())

# List Entities
INSERT_MESSAGE = INSERT INTO data_ingestion_log	(DATA_INGESTION_ID,BATCH,listOfFiles,JOB_STAGE,JOB_STATUS,JOB_MSG,CREATED) VALUES(?,?,?,?,?,?,now())

# Edit Sourcer
UPDATE_INGESTION_LOG = UPDATE  data_ingestion_log SET  JOB_STATUS = ?, JOB_START_TIME = ?,  JOB_END_TIME = ?  WHERE DATA_INGESTION_ID = ? AND BATCH = ?

DELETE_INGESTION_LOG = DELETE FROM data_ingestion_log where DATA_INGESTION_ID = ?

# Get Sourcer By ID

SELECT_ENTITY_BY_ID =SELECT * FROM entity WHERE ID = ?

# ADD processed_pipeline
INSERT_PIPELINE = INSERT INTO processed_pipeline(PIPELINE_NAME,OUTPUT_DATASET,CREATED) VALUES(?,?,now())

INSERT_PIPELINE_PROGRESS = INSERT INTO pipeline_stage_log(pipeline_run_id, stage, status, run_start_time) VALUES(?,?,?,?)

##Clean up stage progress details for previous run.
DELETE_PIPELINE_PROGRESS = DELETE FROM pipeline_stage_log where pipeline_run_id = ?


# List Entities
INSERT_LOGTIMESTAMP = INSERT INTO data_ingestion_log	(DATA_INGESTION_ID,BATCH,listOfFiles,JOB_STAGE,JOB_STATUS,CREATED) VALUES(?,?,?,?,?,?)

# List Entities
INSERT_LOGMESSAGETIMESTAMP = INSERT INTO data_ingestion_log	(DATA_INGESTION_ID,BATCH,listOfFiles,JOB_STAGE,JOB_STATUS,JOB_MSG,CREATED) VALUES(?,?,?,?,?,?,?)


ADD_JOB_MAPPING = INSERT INTO PipelineOozieJobMap(PIPELINEJOBID,OOZIEJOBID) VALUES(?,?) ON DUPLICATE KEY UPDATE OOZIEJOBID=VALUES(OOZIEJOBID)

#LIST OF PROJECT OR MODULES DETAILS
SELECT_PROJECT = select *from project where id = ? and version =?
SELECT_MODULE = select *from module where id = ? and version =?

#----------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------

# web side properties

# List Sourcer
LIST_ENTITY = SELECT * FROM entity WHERE TYPE = ?

#LIST_ENTITY_ADMIN
LIST_ENTITY_ADMIN=select * from entity where type='DataIngestion'

#ADDED BY DEEPAK+RANJITH
LIST_ENTITY_NEW = SELECT * FROM entity WHERE ID IN (SELECT DISTINCT MODULE_id FROM dataset_permission WHERE group_id IN ( SELECT DISTINCT group_id FROM user_group  WHERE user_id =?))

LIST_ENTITY_NEW_1=SELECT * FROM entity WHERE CREATED_BY IN(?)

GET_MODULEID_PERMISSION_MAP=SELECT  MODULE_id,permission FROM dataset_permission WHERE group_id IN ( SELECT DISTINCT group_id FROM user_group  WHERE user_id =?)

#Validate dataset permission
VALIDATE_DATASET_PERMISSION=SELECT distinct permission FROM dataset_permission WHERE group_id IN ( SELECT DISTINCT group_id FROM user_group  WHERE user_id =?) and module_id =? 

#Validate project permission
VALIDATE_PROJECT_PERMISSION=SELECT distinct permission FROM project_permission WHERE group_id IN ( SELECT DISTINCT group_id FROM user_group  WHERE user_id =?) and project_id =? 

#List all Project ID's belonging to given user
LIST_PROJECTS=SELECT distinct project_id FROM project_permission WHERE group_id IN ( SELECT DISTINCT group_id FROM user_group  WHERE user_id =?)

#List Dataset with specified permission belonging to given user
LIST_DATASETS_FOR_GIVEN_PERMISSION=SELECT distinct module_id FROM dataset_permission WHERE group_id IN ( SELECT DISTINCT group_id FROM user_group  WHERE user_id =?)  and permission =?

#List Project with specified permission belonging to given user
LIST_PROJECTS_FOR_GIVEN_PERMISSION= select id from project where id IN ( SELECT distinct project_id FROM project_permission WHERE group_id IN ( SELECT DISTINCT group_id FROM user_group  WHERE user_id =?)  and permission =?)

#Listing groups for a given user
USER_GROUP=select distinct group_id from user_group where user_id =?
 
#Listing user for a given group
USERS_IN_GROUP=select distinct user_id from user_group where group_id =?
 
#gives project-permission list for a given group
LIST_PROJECTS_FOR_GROUP=select  project_id,permission from project_permission where group_id =?
 
#gives dataset-permission list for a given group
LIST_DATASET_FOR_GROUP=select  module_id,permission from dataset_permission where group_id =?

# Add Sourcer
INSERT_ENTITY = INSERT INTO entity	(name,type,json_data,is_active,created,createdBy,last_modified,updatedBy) VALUES(?,?,?,?,now(),?,now(),?)

#Get entity id from entity name
GET_ENTITY_ID=select id from entity where name = ?

#Get List of entity id from entity name
GET_ENTITY_LIST=select id from entity where name in 

# Edit Sourcer
UPDATE_ENTITY = UPDATE  entity SET  NAME =  ? ,  JSON_DATA =  ?, UPDATED_BY =  ?,LAST_MODIFIED =  NOW() WHERE ID = ? AND TYPE = ?

#Adding new entry into Auth_log 
INSERT_LOG_ENTRY= INSERT INTO auth_log (USER_ID,EVENT_TYPE,CLIENT_IP,DESCRIPTION) VALUES (?,?,?,?)

# Get Sourcer By ID
#SELECT_ENTITY_BY_ID =SELECT * FROM entity WHERE ID = ?  AND TYPE = ? //modified by deepak -- ID is primary key no need of TYPE Exception
SELECT_ENTITY_BY_ID =SELECT * FROM entity WHERE id = ? 

# Get Sourcer By Name
SELECT_ENTITY_BY_NAME =SELECT * FROM entity WHERE name = ? 

#Delete Sourcer
DELETE_ENTITY = DELETE FROM entity WHERE ID = ?

#Generalised query to fetch names of particular type of entities.
GET_ENTITY_NAMES = SELECT NAME FROM entity WHERE TYPE = ?

#Fetches list of items to be displayed in UI for particular component
GET_ATTRIBUTE_NAMES = SELECT ENTRY FROM whitelist_config WHERE CONTAINER = ? AND NAME = ?

#List Users
LIST_USERS = SELECT ID, NAME,PASSWORD , EMAIL, DISPLAY_NAME, isDisabled, ROLES FROM user INNER JOIN User_roles ON user.ID = User_roles.USER_ID

#Get User By ID
SELECT_USER_BY_ID = SELECT ID, NAME,PASSWORD , EMAIL, DISPLAY_NAME, ROLES FROM user INNER JOIN User_roles ON user.ID = User_roles.USER_ID WHERE user.ID =?

#Get user password
GET_USER_PASSWORD = SELECT PASSWORD FROM user WHERE NAME = ?

#Add new User
INSERT_USER = INSERT INTO user(NAME,PASSWORD,EMAIL,DISPLAY_NAME) VALUES(?,?,?,?)
INSERT_ROLES= INSERT INTO User_roles(USER_ID,ROLES) VALUES(?,?)

#Update user
UPDATE_USER_PASSWORD = UPDATE user SET PASSWORD =  ? WHERE name = ?
UPDATE_USER = UPDATE user u1 LEFT JOIN USER_ROLES r1 ON u1.id = r1.user_id SET u1.name = ?,u1.email =?, u1.display_name =? ,r1.roles = ? where u1.id= ?

#Check availability
CHECK_USER_AVAILABILITY = select name from user where name = ?

#Delete User
DELETE_USER = DELETE FROM user WHERE ID = ?
DELETE_USER_ROLES = DELETE FROM User_roles WHERE User_id = ?

#get user id by user name
GET_USER_ID= SELECT ID FROM user WHERE NAME = ?

#get entity id by name
GET_ENTITY_BY_NAME= SELECT * FROM entity WHERE NAME = ?

# Get JSON for a given Entity
GET_JSON_FOR_ENTITY = SELECT JSON_DATA FROM entity WHERE NAME = ?

#get Ingestion log details
SELECT_INGESTION_LOG =  SELECT * FROM data_ingestion_log WHERE DATA_INGESTION_ID = ? LIMIT 0,10

#get Ingestion log details
SELECT_STAGE_LOG =  SELECT * FROM pipeline_stage_log WHERE pipeline_run_id = ? order by run_start_time

# List processed pipeline
# LIST_PIPELINE = select distinct pipeline_name,output_dataset from processed_pipeline
LIST_PIPELINE = select distinct TYPE AS pipeline_name,NAME AS output_dataset from entity where type='dataset'

# List MachineLearning Analysis  pipeline
LIST_MLPIPELINE = SELECT * FROM ml_analysis order by ml_id DESC

# Add MachineLearning Analysis  output
INSERT_MLANALYSIS = INSERT INTO ml_analysis(training,testing,algorithm,accuracy) VALUES(?,?,?,?)

#Delete Sourcer
DELETE_MLANALYSIS = DELETE FROM ml_analysis WHERE ml_id = ?

#Gives Ingestion job Status
GET_INGESTION_JOB_STATUS=select JOB_STATUS from data_ingestion_log where DATA_INGESTION_LOG_ID = (select max(DATA_INGESTION_LOG_ID) from data_ingestion_log where DATA_INGESTION_ID=?)

#Get Data Schema Profile Name
GET_SCHMEA_NAME=SELECT NAME FROM entity WHERE TYPE = ? AND UPPER(NAME) = ?


#Add Spark Application sourcer
INSERT_STREAM_DRIVER=INSERT INTO consumer_driver(driver_id,consumer_name,status,start_at,start_by) VALUES(?,?,?,NOW(),?)

#Edit Spark Application 
UPDATE_STREAM_DRIVER=UPDATE consumer_driver SET  STATUS = ?,  STOP_BY = ?,STOP_AT =NOW() WHERE DRIVER_ID =?

#list of drivers currently running
LIST_DRIVER=SELECT DRIVER_ID,CONSUMER_NAME,START_AT,START_BY FROM consumer_driver where STATUS = ? AND CONSUMER_NAME= ?

#Get the job count for specific counsumer name which is in running state
LIST_JOB_COUNT = SELECT count(*) AS COUNT FROM consumer_driver where  CONSUMER_NAME= ? and STATUS = ?

#list all Running Jobs
LIST_RUNNING_DRIVER=SELECT DRIVER_ID,CONSUMER_NAME,START_AT,START_BY FROM consumer_driver where STATUS = ?

#get List of records related to Ingestion profile 
GET_INGESTION_DETAILS=select type,json_data from entity where id in (?,?,?,?)

#copy the Ingestion details to archive table
COPY_TO_ARCHIVE_TABLE=insert into schema_archive(schema_id, schema_name,dataset_json,source_json,schema_json,schedular_json,user_name) Values(?,?,?,?,?,?,?)

#deleting Entity id's after moving to archive
DELETE_ENTITY_IDS=DELETE FROM entity WHERE ID in (?,?,?,?)

LIST_ARCHIVE_PROFILES = SELECT schema_id, schema_name FROM schema_archive
SELECT_ARCHIVE_SCHEMA = SELECT schema_name, schema_json, source_json, dataset_json, schedular_json, user_name FROM schema_archive where schema_id = ?
DELETE_ARCHIVE_SCHEMA = DELETE FROM schema_archive WHERE schema_id = ?
SELECT_DATASET_JSON = SELECT dataset_json FROM schema_archive WHERE schema_id = ?

#Queries to get Pipeline stage execution status
GET_OOZIE_JOB_ID = select OOZIEJOBID from  PipelineOozieJobMap where PIPELINEJOBID = ?
GET_OOZIE_ACTION_STATUS = select id, start_time, end_time, status from WF_ACTIONS where wf_id = ?

#!!--sharing a project--!!
# validate project permission for a given user in his default group
VALIADTE_PROJECT_PERMISSION=SELECT IF((( select (select permission from project_permission where group_id=? and project_id=? ) & ?) = ?),true,false)

# get project permission for a given user 
#GET_PROJECT_PERMISSION=select distinct permission from project_permission where group_id in (select distinct group_id from user_group where user_id=?) and project_id=?

# insert in to table project_permission
INSERT_TO_PROJECT_PERMISSION=insert into project_permission (group_id,project_id,permission,created,createdBy) values (?,?,?,now(),?) 
#!!--sharing a project--END--!!

#!!--sharing a dataset--!!
# validate dataset permission for a given user in his default group
VALIADTE_DATASET_PERMISSION=SELECT IF((( select (select permission from dataset_permission where group_id=? and module_id=? ) & ?) = ?),true,false)

# get dataset permission for a given user 
#GET_DATASET_PERMISSION=select distinct permission from dataset_permission where group_id in (select distinct group_id from user_group where user_id=?) and module_id=?

# insert in to table dataset_permission
INSERT_TO_DATASET_PERMISSION=insert into dataset_permission (group_id,module_id,permission,created,createdBy) values (?,?,?,now(),?) 
#!!--sharing a dataset--END--!!

# Events

# Project event
INSERT_INTO_PROJECTEVENT=insert into project_events (project_id,event_type,user,shared_with_group,description) values (?,?,?,?,?)

#DataSet Event
INSERT_INTO_DATASETEVENT=insert into dataset_events (entity_id,event_type,user,shared_with_group,description) values (?,?,?,?,?)

#CREATE_DEFAULT_GROUP
CREATE_DEFAULT_GROUP=insert into groups (id,description,created,createdBy,is_singleuser) values (?,?,now(),?,1);

#ADD_USER_TO_GROUP
ADD_USER_TO_GROUP=insert into user_group (group_id,user_id,createdBy) values (?,?,?)

#IS_SINGLEUSER
IS_SINGLEUSER=select is_singleuser from groups where id =?

#delete user from a group
DELETE_USER_FROM_GROUP=delete from user_group where group_id =? and user_id =?

# delete project entry in case insertion to project_permission for default user group fails
DELETE_PROJECT_ENTRY=delete from project where id=?

# delete module entry in case insertion to dataset_permission for default user group fails
DELETE_DATASET_ENTRY=delete from module where id=?

# Project run history
PROJECT_RUN_HISTORY=select id,oozie_id,start_time,end_time,status from project_history where project_id=? and version=? order by id desc  limit 1

# Module run history
MODULE_RUN_STATUS_LIST_FOR_A_POJECT=select module_id,version,start_time,end_time,status,details from module_history where project_run_id=?

#Gives name of user who created the given project
GET_PROJECT_CREATOR=select createdBy from project where id=? and version=1

# Delete a Project
DELETE_PROJECT=DELETE FROM project  WHERE project.id = ?

# Kill a Project Execution
GET_LATEST_OOZIE_EXECUTION_ID_FOR_A_PROJECT=SELECT oozie_id  FROM project_history  where id=(select max(id) FROM project_history where project_id=? and version=?);


#TODO is_singleuser needs to be removed
# ADD GROUP
ADD_GROUP=insert into groups (id,description,created,createdBy,is_singleuser,superuser_group) values (?,?,now(),?,0,0)

#CHECKS FOR SUPER USER
IS_SUPER_USER=Select * from group_membership where User_id=? And group_id='admin';

#Delete a group
DELETE_GROUP=delete from groups where id=?;

#Update a group
UPDATE_GROUP=update groups set description=? where id=?;

#Check availability
CHECK_GROUP_AVAILABILITY = select id from groups where id = ?

#LIST_GROUP
LIST_GROUP = select * from groups 

#LIST_DISABLED_GROUP
LIST_DISABLED_GROUP = select * from groups where isDisabled=1;

#LIST_DISABLED_GROUP_NAME
LIST_DISABLED_GROUP_NAME = select id from groups where isDisabled=1;

ADD_USERDETAILS_IN_USER_TABLE= insert into user (name,password,email,display_name,CREATED,CREATED_BY,LAST_MODIFIED,UPDATED_BY,dateOfBirth,contactNumber,gender,address,dataset_write_permission,dataset_execute_permission,project_write_permission,project_execute_permission) values (?,?,?,?,now(),?,now(),?,?,?,?,?,?,?,?,?)

UPDATE_USERDETAILS_IN_USER_TABLE= update user set email=?,display_name=?,LAST_MODIFIED=now(),UPDATED_BY=?,dateOfBirth=?,contactNumber=?,gender=?,address=?,dataset_write_permission=?,dataset_execute_permission=?,project_write_permission=?,project_execute_permission=? where name=?
 
ADD_USERDETAILS_IN_GROUP_MEMBERSHIP_TABLE=insert into group_membership (group_id,user_id,created_at,createdBy,user_permission,group_admin) values (?,?,now(),?,?,?)

GET_GROUPNAME_PERMISSION_MAP= select group_id,user_permission from group_membership where user_id=?

GET_USER_LIST_FOR_GIVEN_GROUP=select user_id FROM group_membership where group_id=?

GET_USER_LEVEL_PERMISSION=select dataset_write_permission,dataset_execute_permission,project_write_permission,project_execute_permission from user where name=?

#LIST_USER
LIST_USER = select * from user 
GET_USER= select * from user where name=?
GET_GROUP_LEVEL_PERMISSION=SELECT * FROM group_membership where user_id=?

#Gives name of user who created the given entity
GET_ENTITY_CREATOR=select CREATED_BY from entity where id=?

#Gives name of user who created the given project
GET_PROJECT_CREATOR=select createdBy from project where id=? and version=1

#Gives name of user who created the given module
GET_MODULE_CREATOR=select createdBy from module where id=? and version=1;

#Check group availability
CHECK_GROUP_AVAILABILITY =  select id from groups where id= ?

ADD_USERDETAILS_IN_USER_ROLES_TABLE= insert into User_roles(User_id,roles) values(?,?)

DELETE_USERDETAILS_IN_USER_ROLES_TABLE= delete from User_roles where User_id =?

UPDATE_USERDETAILS_IN_USER_ROLES_TABLE= update User_roles set roles=? where User_id=?

DELETE_USERDETAILS_IN_GROUP_MEMBERSHIP_TABLE=delete from group_membership where user_id=?

GET_GROUP_INFO= select * from groups where id=?

#GIVES PERMISSION FOR A GIVEN RESOUCE select MAX( g1.user_permission) from group_membership g1 INNER JOIN group_membership g2 on g1.group_id=g2.group_id where g1.user_id='caller' and g2.user_id='res-creator';
GET_PERMISSION_FOR_GIVEN_RESOURCE=select MAX( g1.user_permission) from group_membership g1 INNER JOIN group_membership g2 on g1.group_id=g2.group_id where g1.user_id=? and g2.user_id=?;

ENABLE_DISABLE_USER_ACCOUNT=update user set isDisabled=? where name=?

#Gives the number of running process e.g. project, ingestion,streaming
GET_TOTAL_RUNNING_PROCESSES=select (select component_value from component_key where id=job_type) as comp_type,COUNT(*) as run_count from comp_exce_status  where time_stamp in (select MAX(time_stamp) as latest_time from comp_exce_status group by comp_exce_id)  and job_status_id in (1,2,4,8) and comp_exce_id in(select id from component_execution where user_id=(select id from user where name=?)) group by job_type;

GET_PROCESS_DETAILS_BY_TYPE=select (select distinct name from tablename where id=a.component_id) as comp_name,(select status from job_status c where c.id=b.job_status_id) as status,b.job_id,b.time_stamp from component_execution a,comp_exce_status b where user_id in (select id from user where name=?) and a.id=b.comp_exce_id and job_type=(select id from component_key where component_value=?) and b.time_stamp in(select MAX(time_stamp) as latest_time from comp_exce_status group by comp_exce_id,job_type) and job_status_id in(1,2,4,8);

GET_STREAMING_RUN_COUNT= select (select distinct name from entity where id in(select component_id from component_execution where id=comp_exce_id)) as comp_name,COUNT(*) as run_count from comp_exce_status  where time_stamp in (select MAX(time_stamp) as latest_time from comp_exce_status group by comp_exce_id) and job_status_id in(4) and job_type=3 group by comp_name;

GET_INGESTION_JOB_ID=select  job_id from comp_exce_status  where time_stamp in (select MAX(time_stamp) as latest_time from comp_exce_status group by comp_exce_id) and job_status_id in(2) and comp_exce_id in(select id from component_execution where component_id=?) group by comp_exce_id;

GET_PROJECT_JOB_ID=select oozie_id from project_history where project_id=? and status='RUNNING';






